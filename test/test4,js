const fs = require('fs').promises;
const path = require('path');
const {authenticate} = require('@google-cloud/local-auth');
const {SpacesServiceClient} = require('@google-apps/meet').v2;
const {auth} = require('google-auth-library');

// Scope to create meeting spaces
const SCOPES = ['https://www.googleapis.com/auth/meetings.space.created'];
const TOKEN_PATH = path.join(process.cwd(), 'token.json');
const CREDENTIALS_PATH = path.join(__dirname, 'credentials.json');
console.log(CREDENTIALS_PATH);

async function loadSavedCredentialsIfExist() {
  try {
    const content = await fs.readFile(TOKEN_PATH);
    return auth.fromJSON(JSON.parse(content));
  } catch {
    return null;
  }
}

async function saveCredentials(client) {
  const keys = JSON.parse(await fs.readFile(CREDENTIALS_PATH));
  const key = keys.installed || keys.web;
  const payload = JSON.stringify({
    type: 'authorized_user',
    client_id: key.client_id,
    client_secret: key.client_secret,
    refresh_token: client.credentials.refresh_token,
  });
  await fs.writeFile(TOKEN_PATH, payload);
}

async function authorize() {
  let client = await loadSavedCredentialsIfExist();
  if (!client) {
    client = await authenticate({
      scopes: SCOPES,
      keyfilePath: CREDENTIALS_PATH,
    });
    if (client.credentials) await saveCredentials(client);
  }
  return client;
}

async function createSpace(authClient) {
  const meetClient = new SpacesServiceClient({auth: authClient});
  const [response] = await meetClient.createSpace({});
  console.log(`Meet URL: ${response.meetingUri}`);
}

authorize()
  .then(createSpace)
  .catch(console.error);
